{"version":3,"sources":["scripts/main.js"],"names":["scoreElement","document","querySelector","startBtn","restartBtn","startMessage","winMessage","loseMessage","tCells","querySelectorAll","cellsArray","Array","from","BOARD_SIZE","prevBoardState","isBlocked","isLose","isWin","gameScore","board","ifNoChanges","toString","isFreeCellsLeft","classList","toggle","isfWinnCheck","flat","find","cell","filter","length","start","generateRandCell","render","restartGame","updateScore","clear","forEach","row","fill","moveDown","colums","getColums","column","updatedCol","slide","reverse","splice","updateBordColums","moveUp","i","j","addEventListener","add","keyEvent","key","moveLeft","moveRight","columnArr","push","updatedValues","cellValues","filterZeros","value","textContent","Math","random","getRandIndex","floor","flatBoard","updateCell","remove","index"],"mappings":"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","file":"main.17ba8ae3.js","sourceRoot":"..\\src","sourcesContent":["'use strict';\n\nconst scoreElement = document.querySelector('.game-score');\nconst startBtn = document.querySelector('.start');\nconst restartBtn = document.querySelector('.restart');\n\nconst startMessage = document.querySelector('.message-start');\nconst winMessage = document.querySelector('.message-win');\nconst loseMessage = document.querySelector('.message-lose');\n\nconst tCells = document.querySelectorAll('.field-cell');\nconst cellsArray = Array.from(tCells);\n\nconst BOARD_SIZE = 4;\nlet prevBoardState = [];\nlet isBlocked = true;\nlet isLose = false;\nlet isWin = false;\nlet gameScore = 0;\n\nconst board = [\n  [0, 0, 0, 0],\n  [0, 0, 0, 0],\n  [0, 0, 0, 0],\n  [0, 0, 0, 0],\n];\n\nstartBtn.addEventListener('click', () => {\n  start();\n\n  startBtn.classList.toggle('hidden', !isBlocked);\n  restartBtn.classList.toggle('hidden', isBlocked);\n  startMessage.classList.add('hidden');\n});\n\nrestartBtn.addEventListener('click', () => {\n  restartGame();\n});\n\ndocument.addEventListener('keydown', keyEvent => {\n  const key = keyEvent.key;\n\n  prevBoardState = board.toString();\n\n  if (isBlocked) {\n    return;\n  }\n\n  switch (key) {\n    case 'ArrowLeft':\n      moveLeft();\n      break;\n\n    case 'ArrowRight':\n      moveRight();\n      break;\n\n    case 'ArrowUp':\n      moveUp();\n      break;\n\n    case 'ArrowDown':\n      moveDown();\n      break;\n  }\n\n  isfWinnCheck();\n\n  if (isFreeCellsLeft()) {\n    generateRandCell();\n  }\n\n  render();\n  ifNoChanges();\n});\n\nfunction ifNoChanges() {\n  if (prevBoardState === board.toString() && !isFreeCellsLeft()) {\n    isLose = true;\n    isBlocked = true;\n    loseMessage.classList.toggle('hidden', !isLose);\n  }\n}\n\nfunction isfWinnCheck() {\n  const winnCell = board.flat().find(cell => cell === 2048);\n\n  if (winnCell) {\n    isBlocked = true;\n    isWin = true;\n    restartBtn.classList.toggle('hidden', !isWin);\n    winMessage.classList.toggle('hidden', !isWin);\n  }\n}\n\nfunction isFreeCellsLeft() {\n  return board.flat().filter(cell => cell === 0).length !== 0;\n}\n\nfunction start() {\n  isBlocked = false;\n  generateRandCell();\n  generateRandCell();\n  render();\n}\n\nfunction restartGame() {\n  gameScore = 0;\n  updateScore(0);\n  clear();\n\n  board.forEach(row => {\n    row.fill(0);\n  });\n  start();\n}\n\nfunction moveDown() {\n  const colums = getColums();\n\n  colums.forEach(column => {\n    const updatedCol = slide(column.reverse());\n\n    column.fill(0)\n      .splice(0, updatedCol.length, ...updatedCol);\n    column.reverse();\n  });\n  updateBordColums(colums);\n}\n\nfunction moveUp() {\n  const colums = getColums();\n\n  colums.forEach(column => {\n    const updatedCol = slide(column);\n\n    column.fill(0)\n      .splice(0, updatedCol.length, ...updatedCol);\n  });\n  updateBordColums(colums);\n}\n\nfunction updateBordColums(colums) {\n  for (let i = 0; i < BOARD_SIZE; i++) {\n    for (let j = 0; j < BOARD_SIZE; j++) {\n      board[i][j] = colums[j][i];\n    }\n  }\n}\n\nconst getColums = () => {\n  const columnArr = [];\n\n  for (let i = 0; i < BOARD_SIZE; i++) {\n    let column = [];\n\n    for (let j = 0; j < BOARD_SIZE; j++) {\n      column.push(board[j][i]);\n    }\n    columnArr.push(column);\n    column = [];\n  }\n\n  return columnArr;\n};\n\nfunction moveRight() {\n  board.forEach(row => {\n    const updatedValues = slide(row.reverse());\n\n    row.fill(0)\n      .splice(0, updatedValues.length, ...updatedValues);\n    row.reverse();\n  });\n}\n\nfunction moveLeft() {\n  board.forEach(row => {\n    const updatedValues = slide(row);\n\n    row.fill(0)\n      .splice(0, updatedValues.length, ...updatedValues);\n  });\n}\n\nfunction slide(row) {\n  const cellValues = filterZeros(row);\n\n  for (let i = 0; i < cellValues.length - 1; i++) {\n    if (cellValues[i] === cellValues[i + 1]) {\n      cellValues[i] *= 2;\n      cellValues[i + 1] = 0;\n      gameScore += cellValues[i];\n      updateScore(gameScore);\n    }\n  }\n\n  return filterZeros(cellValues);\n}\n\nfunction updateScore(value) {\n  scoreElement.textContent = value;\n}\n\nconst filterZeros = (row) => row.filter(cell => cell !== 0);\n\nfunction generateRandCell() {\n  const value = Math.random() < 0.9 ? 2 : 4;\n  const getRandIndex = () => Math.floor(Math.random() * BOARD_SIZE);\n  const row = getRandIndex();\n  const cell = getRandIndex();\n\n  if (board[row][cell] === 0) {\n    board[row][cell] = value;\n\n    return value;\n  } else {\n    return generateRandCell();\n  }\n}\n\nfunction render() {\n  clear();\n\n  const flatBoard = board.flat();\n\n  for (let i = 0; i < flatBoard.length; i++) {\n    if (flatBoard[i] !== 0) {\n      updateCell(i, flatBoard[i]);\n    }\n  }\n}\n\nfunction clear() {\n  cellsArray.flat().forEach(cell => {\n    if (cell.classList.length > 1) {\n      cell.classList.remove(cell.classList[1]);\n    }\n    cell.textContent = '';\n  });\n}\n\nfunction updateCell(index, value) {\n  cellsArray[index].classList.add(`field-cell--${value}`);\n  cellsArray[index].textContent = value;\n}\n"]}